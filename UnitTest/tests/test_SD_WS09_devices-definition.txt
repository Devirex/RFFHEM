defmod test_SD_WS09_devices UnitTest dummyDuino ( 
{
	use Test2::V0;
	use Test2::Tools::Compare qw{is};
	use JSON; 
	## for online testsytem: defmod test_SD_WS09_devices UnitTest dummyDuino ##

	subtest "check requirements" => sub {
		my $rc = eval {
      require Digest::CRC;
      Digest::CRC->import();
      1;
		};
		plan(3);
		is($rc,1,"Digest::CRC dependency");
		CommandDeleteAttr(undef,"global dupTimeout") if (AttrVal("global", "dupTimeout", undef));
		is(AttrVal("global", "dupTimeout", undef),undef,"dupTimeout is not defined");
		CommandDeleteAttr(undef,"autocreate autocreateThreshold") if (AttrVal("autocreate", "autocreateThreshold", undef));
		is(AttrVal("autocreate", "autocreateThreshold", undef),undef,"autocreateThreshold is not defined");
	};

	my $testDataArray; 
	sub loadJson {
		my $jsonStr=GetFileFromURL($_[0],4,"",1,4);
		$testDataArray = eval { decode_json($jsonStr) };
		if($@){
			diag("open json file TestData was not possible $?"); 
			diag explain $jsonStr;
		}
	}

	my $jsonSourceUrl = AttrVal($name,"Test_Data_URI","https://raw.githubusercontent.com/RFD-FHEM/SIGNALduino_TOOL/master/FHEM/lib/SD_Device_ProtocolList.json");
	loadJson($jsonSourceUrl); 

  my $todo = undef;
  TestLabel:
	while ( (my $pID, my $testSet) = each  (@{$testDataArray}) ) {
		next if (!defined($testSet->{module}) || $testSet->{module} ne "SD_WS09");
		next if (!lib::SD_Protocols::exists($testSet->{id}));
		next if (lib::SD_Protocols::checkProperty($testSet->{id},'developId',undef));
	
		while ( (my $tID, my $tData) = each (@{$testSet->{data}}) ) {
			#diag explain $tData;
			
			subtest "Checking module: $testSet->{module} device: $testSet->{name} TestNo: $tID " => sub {
				subtest "Verify device" => sub {
					plan(3);
					note("Test status defined");
					if (IsDevice($tData->{internals}{NAME})) {
						CommandDelete(undef,$tData->{internals}{NAME});
						is(IsDevice($tData->{internals}{NAME}),0,"Device are deleted");
					} else {
						is(IsDevice($tData->{internals}{NAME}),0,"Device is not exists");
					}				

					Dispatch($targetHash,$tData->{dmsg});
					sleep 1;
					is(InternalVal($tData->{internals}{NAME}, "STATE", undef),"Defined","Device created with once dispatch");
					Dispatch($targetHash,$tData->{dmsg});
					sleep 1;
					is(InternalVal($tData->{internals}{NAME}, "STATE", undef),$tData->{readings}{state},"Device STATE ready after new dispatch");
				};

				no strict "refs"; 
				&{$modules{$testSet->{module}}{ParseFn}}($targetHash,$tData->{dmsg});
				use strict "refs"; 
				subtest "Verify readings" => sub {
					my $plan=0;
					while ( (my $rName, my $rValue) = each (%{$tData->{readings}}) ) {
						$plan++;
						is(ReadingsVal($tData->{internals}{NAME} ,$rName,"0"),$rValue,"check reading $rName");
					}
					plan($plan);
				};
				
				subtest "Verify internals" => sub {
					my $plan=0;
					while ( (my $iName, my $iValue) = each (%{$tData->{internals}}) ) {
						$plan++;
						is(InternalVal($tData->{internals}{NAME} ,$iName,"0"),$iValue,"check internal $iName");						
					}
					plan($plan);
				};
			}
		}
	}
	
	if ( !defined($todo) ) {
		my $jsonSourceUrl = AttrVal($name,"Test_Data_URI","https://raw.githubusercontent.com/RFD-FHEM/SIGNALduino_TOOL/pre-release/FHEM/lib/SD_Device_ProtocolList.json");	
		loadJson($jsonSourceUrl); 
		$todo = todo "Testing against pre-release testdata, correct test before push this to master";
		goto TestLabel;
	}
}
)